// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.0
// source: circuit-breaker/protobuf/notifier.proto

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SmsNotifier_Send_FullMethodName = "/SmsNotifier/Send"
)

// SmsNotifierClient is the client API for SmsNotifier service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SmsNotifierClient interface {
	Send(ctx context.Context, in *SmsRequest, opts ...grpc.CallOption) (*SmsResponse, error)
}

type smsNotifierClient struct {
	cc grpc.ClientConnInterface
}

func NewSmsNotifierClient(cc grpc.ClientConnInterface) SmsNotifierClient {
	return &smsNotifierClient{cc}
}

func (c *smsNotifierClient) Send(ctx context.Context, in *SmsRequest, opts ...grpc.CallOption) (*SmsResponse, error) {
	out := new(SmsResponse)
	err := c.cc.Invoke(ctx, SmsNotifier_Send_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SmsNotifierServer is the server API for SmsNotifier service.
// All implementations must embed UnimplementedSmsNotifierServer
// for forward compatibility
type SmsNotifierServer interface {
	Send(context.Context, *SmsRequest) (*SmsResponse, error)
	mustEmbedUnimplementedSmsNotifierServer()
}

// UnimplementedSmsNotifierServer must be embedded to have forward compatible implementations.
type UnimplementedSmsNotifierServer struct {
}

func (UnimplementedSmsNotifierServer) Send(context.Context, *SmsRequest) (*SmsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Send not implemented")
}
func (UnimplementedSmsNotifierServer) mustEmbedUnimplementedSmsNotifierServer() {}

// UnsafeSmsNotifierServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SmsNotifierServer will
// result in compilation errors.
type UnsafeSmsNotifierServer interface {
	mustEmbedUnimplementedSmsNotifierServer()
}

func RegisterSmsNotifierServer(s grpc.ServiceRegistrar, srv SmsNotifierServer) {
	s.RegisterService(&SmsNotifier_ServiceDesc, srv)
}

func _SmsNotifier_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SmsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmsNotifierServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SmsNotifier_Send_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmsNotifierServer).Send(ctx, req.(*SmsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SmsNotifier_ServiceDesc is the grpc.ServiceDesc for SmsNotifier service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SmsNotifier_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "SmsNotifier",
	HandlerType: (*SmsNotifierServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Send",
			Handler:    _SmsNotifier_Send_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "circuit-breaker/protobuf/notifier.proto",
}
